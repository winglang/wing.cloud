import { mkdir, readFile, writeFile } from "node:fs/promises";

import { type AstroConfig, type AstroIntegrationLogger } from "astro";
import { parse } from "dotenv";

import { name } from "../package.json" assert { type: "json" };

export type GenerateEnvironmentTypeDefintionsOptions = {
  config: AstroConfig;
  logger: AstroIntegrationLogger;
};

export const generateEnvironmentTypeDefinitions = async ({
  config,
  logger,
}: GenerateEnvironmentTypeDefintionsOptions) => {
  logger.debug("Generating environment type definitions...");
  const env = parse(await readFile(new URL(".env.example", config.root)));

  let dotenvDts = [
    `// Generated by ${name}. Do not edit.`,
    "interface ImportMetaEnv {",
  ];
  for (const [key, value] of Object.entries(env)) {
    const type = typeof value === "string" ? "string" : "unknown";
    dotenvDts.push(
      `\t/** Generated by \`${name}\` using \`.env.example\`. */`,
      `\treadonly ${key}: ${type};`,
    );
  }
  dotenvDts.push(
    "}",
    "",
    "interface ImportMeta {",
    "\treadonly env: ImportMetaEnv;",
    "}",
    "",
  );

  const dir = new URL(`.wing/${name}/`, config.root);
  await mkdir(dir, { recursive: true });
  await writeFile(new URL("dotenv.d.ts", dir), dotenvDts.join("\n"));
};
