---
import Head from "../components/Head.astro";
import Heading from "../components/Heading.astro";
import http from 'http';
import https from 'https';


const GITHUB_APP_CLIENT_ID = import.meta.env["GITHUB_APP_CLIENT_ID"];
const GITHUB_APP_CLIENT_SECRET = import.meta.env["GITHUB_APP_CLIENT_SECRET"];

const parseResponse = (response: http.IncomingMessage):Promise<any> => {
  return new Promise<any>((resolve, reject) => {
    let data = '';
    response.on('data', (chunk) => {
      data += chunk;
    });
    response.on('end', () => {
      if (response.statusCode === 200) {
        resolve(JSON.parse(data));
      } else {
        console.error(data);
        console.error(response.statusMessage);
        reject({});
      }
    });
  });
}

const exchangeCode = async (code: string): Promise<any> => {
  const postData = JSON.stringify({
    client_id: GITHUB_APP_CLIENT_ID,
    client_secret: GITHUB_APP_CLIENT_SECRET,
    code: code,
  });

  const options: https.RequestOptions = {
    method: 'POST',
    hostname: 'github.com',
    path: '/login/oauth/access_token',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    },
  };

  const result = await new Promise<http.IncomingMessage>((resolve, reject) => {
    const req = https.request(options, (res) => {
      resolve(res);
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.write(postData);
    req.end();
  });

  return parseResponse(result);
}

const getUserInfo = async (token: string): Promise<any> => {
  const options: https.RequestOptions = {
    method: 'GET',
    hostname: 'api.github.com',
    path: '/user',
    headers: {
      'Accept': 'application/json',
      "User-Agent": "377792",
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
    },
  };

  const result = await new Promise<http.IncomingMessage>((resolve, reject) => {
    const req = https.request(options, (res) => {
      resolve(res);
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.end();
  });

  return parseResponse(result);
}

const login = async () => {
  const code = Astro.url.searchParams.get('code')! || '';

  if (!code) {
    return "No code provided.";
  } else {
    try {
      const tokenData = await exchangeCode(code);
      if (tokenData.access_token) {
        const token = tokenData.access_token;
        const userInfo = await getUserInfo(token);
        const handle = userInfo.login;
        const name = userInfo.name;

        return `Successfully authorized! Welcome, ${name} (${handle}).`;
      }
    } catch (e) {
      console.error(e);
    }
  }
  return "An error occurred";
}

const loginMessage = await login();
---

<html>
  <Head />
  <body>
    <Heading title="GitHub Login" />
    {loginMessage}
  </body>
</html>
