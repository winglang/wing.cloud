import { mkdir, readFile, writeFile, stat } from "node:fs/promises";

import { parse } from "dotenv";

import { DEFAULT_TYPES_DIRECTORY, PACKAGE_NAME } from "./defaults.js";

/**
 * @param {import("node:fs").PathLike} path
 * @return {Promise<import("dotenv").DotenvParseOutput>}
 */
const readEnvFile = async (path) => {
  try {
    await stat(envExampleFilename);
  } catch (error) {
    // File does not exist
    return {};
  }
  if (await stat(envExampleFilename)) {
    return;
  }

  return parse(await readFile(new URL(".env.example", root)));
};

/**
 * @return {import("vite").Plugin}
 */
export const dotenv = () => {
  /**
   * @type {{ config?: import("vite").UserConfig }
   */
  const context = {};
  return {
    name: `${PACKAGE_NAME}:dotenv`,
    configResolved(config) {
      context.config = config;
    },
    async buildStart() {
      if (!context.config) {
        throw new Error("No config found");
      }

      const root = `file://${context.config.root}/`;
      const envPrefix = context.config.envPrefix ?? "VITE_";
      const envExampleFilename = new URL(".env.example", root);

      this.debug("Generating dotenv type definitions...");
      let dotenvDts = [
        `// Generated by ${PACKAGE_NAME}. Do not edit.`,
        "interface ImportMetaEnv {",
      ];
      try {
        const env = await readEnvFile(envExampleFilename);
        for (const [key, value] of Object.entries(env)) {
          if (!key.startsWith(envPrefix)) {
            continue;
          }
          const type = typeof value === "string" ? "string" : "unknown";
          dotenvDts.push(
            `\t/** Generated by \`${PACKAGE_NAME}\` based on \`.env.example\`. */`,
            `\treadonly ${key}: ${type};`,
          );
        }
      } catch (error) {
        this.error(error);
      }
      dotenvDts.push(
        "}",
        "",
        "interface ImportMeta {",
        "\treadonly env: ImportMetaEnv;",
        "}",
        "",
      );

      const dir = new URL(`${DEFAULT_TYPES_DIRECTORY}/`, root);
      await mkdir(dir, { recursive: true });
      await writeFile(new URL("dotenv.d.ts", dir), dotenvDts.join("\n"));
    },
  };
};
