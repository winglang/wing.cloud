import { mkdir, readFile, writeFile, stat } from "node:fs/promises";

import { parse } from "dotenv";

import { DEFAULT_TYPES_DIRECTORY, PACKAGE_NAME } from "./defaults.js";

/**
 * @param {import("node:fs").PathLike} path
 * @return {Promise<import("dotenv").DotenvParseOutput|undefined>}
 */
const readEnvFile = async (path) => {
  try {
    await stat(path);
  } catch {
    // File does not exist.
    return {};
  }

  return parse(await readFile(path));
};

/**
 * @param {string} value
 * @param {string|string[]} prefix
 * @return {boolean}
 */
const startsWith = (value, prefix) => {
  if (Array.isArray(prefix)) {
    return prefix.some((p) => value.startsWith(p));
  }

  return value.startsWith(prefix);
};

/**
 * @return {import("vite").Plugin}
 */
export const dotenv = () => {
  /**
   * @type {{
   *  root?: string;
   *  envPrefix?: string|string[];
   * }}
   */
  const context = {};
  return {
    name: `${PACKAGE_NAME}:dotenv`,
    configResolved(config) {
      context.root = config.root;
      context.envPrefix = config.envPrefix ?? "VITE_";
    },
    async buildStart() {
      if (!context.root) {
        throw new Error("[root] is missing");
      }

      if (!context.envPrefix) {
        throw new Error("[envPrefix] is missing");
      }

      const root = `file://${context.root}/`;
      const envPrefix = context.envPrefix;
      const envExampleFilename = new URL(".env.example", root);

      this.debug("Generating dotenv type definitions...");
      let dotenvDts = [
        `// Generated by ${PACKAGE_NAME}. Do not edit.`,
        "interface ImportMetaEnv {",
      ];
      try {
        const env = await readEnvFile(envExampleFilename);
        for (const [key, value] of Object.entries(env ?? {})) {
          if (!startsWith(key, envPrefix)) {
            continue;
          }
          const type = typeof value === "string" ? "string" : "unknown";
          dotenvDts.push(
            `\t/** Generated by \`${PACKAGE_NAME}\` based on \`.env.example\`. */`,
            `\treadonly ${key}: ${type};`,
          );
        }
      } catch (error) {
        this.error(
          error instanceof Error
            ? error
            : new Error("Unknown error", { cause: error }),
        );
      }
      dotenvDts.push(
        "}",
        "",
        "interface ImportMeta {",
        "\treadonly env: ImportMetaEnv;",
        "}",
        "",
      );

      const dir = new URL(`${DEFAULT_TYPES_DIRECTORY}/`, root);
      await mkdir(dir, { recursive: true });
      await writeFile(new URL("dotenv.d.ts", dir), dotenvDts.join("\n"));
    },
  };
};
