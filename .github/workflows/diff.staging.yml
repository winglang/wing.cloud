name: Pull Request Diff

on:
  pull_request:
    paths-ignore:
      - '**/*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  pull-requests: write # This is required for commenting on PRs

env:
  AWS_REGION: "us-east-1"
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: https://staging.winglang.io
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"
      - name: Install Dependencies
        run: pnpm install
      - name: Compile Wing Cloud          
        env: 
          DNSIMPLE_TOKEN: ${{ secrets.DNSIMPLE_TOKEN }}
          DNSIMPLE_ACCOUNT: ${{ secrets.DNSIMPLE_ACCOUNT }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          BOT_GITHUB_APP_ID: ${{ secrets.BOT_GITHUB_APP_ID }}
          BOT_GITHUB_CLIENT_ID: ${{ secrets.BOT_GITHUB_CLIENT_ID }}
          BOT_GITHUB_CLIENT_SECRET: ${{ secrets.BOT_GITHUB_CLIENT_SECRET }}
          BOT_GITHUB_PRIVATE_KEY: ${{ secrets.BOT_GITHUB_PRIVATE_KEY }}
          BOT_GITHUB_WEBHOOK_SECRET: ${{ secrets.BOT_GITHUB_WEBHOOK_SECRET }}
          FLY_ORG_SLUG: ${{ secrets.FLY_ORG_SLUG }}
          FLY_TOKEN: ${{ secrets.FLY_TOKEN }}
          PROXY_SUBDOMAIN: ${{ vars.PROXY_SUBDOMAIN }}
          PROXY_ZONE_NAME: ${{ vars.PROXY_ZONE_NAME }}
          VITE_GITHUB_APP_CLIENT_ID: ${{ secrets.VITE_GITHUB_APP_CLIENT_ID }}
          VITE_GITHUB_APP_NAME: ${{ secrets.VITE_GITHUB_APP_NAME }}  
          TF_BACKEND_BUCKET: ${{ vars.TF_BACKEND_BUCKET }}
          TF_BACKEND_BUCKET_REGION: ${{ vars.TF_BACKEND_BUCKET_REGION }}
          TF_BACKEND_LOCK_TABLE: ${{ vars.TF_BACKEND_LOCK_TABLE }}
          TF_BACKEND_STATE_FILE: "${{ github.repository }}/${{ github.ref_name }}/infrastructure/main.tfstate"        
        run: pnpm wing compile -t tf-aws --plugin ./s3.backend.js main.w
        working-directory: 'apps/@wingcloud/infrastructure'        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: gh-actions-wingcloud-staging
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: 'apps/@wingcloud/infrastructure/target/main.tfaws'
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: 'apps/@wingcloud/infrastructure/target/main.tfaws'
      
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            })
          
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }