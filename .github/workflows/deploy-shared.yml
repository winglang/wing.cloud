name: Terraform Deploy

on:
  workflow_call:
    inputs:
      TF_BACKEND_STATE_FILE:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      ENVIRONMENT_NAME:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT_NAME }}
      url: https://${{ inputs.ENVIRONMENT_NAME }}.wingcloud.io
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Compile Wing Cloud dependencies
        run: npx turbo compile --filter=!@wingcloud/infrastructure
      - name: Compile Wing Cloud
        env:
          ## Inflight
          APP_SECRET: ${{ secrets.APP_SECRET }}
          WS_SECRET: ${{ secrets.WS_SECRET }}
          SEGMENT_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_KEY }}
          ENABLE_ANALYTICS: ${{ secrets.ENABLE_ANALYTICS }}
          FLY_ORG_SLUG: ${{ secrets.FLY_ORG_SLUG }}
          FLY_TOKEN: ${{ secrets.FLY_TOKEN }}
          DNSIMPLE_TOKEN: ${{ secrets.DNSIMPLE_TOKEN }}
          BOT_GITHUB_APP_ID: ${{ secrets.BOT_GITHUB_APP_ID }}
          BOT_GITHUB_APP_NAME: ${{ secrets.BOT_GITHUB_APP_NAME }}
          BOT_GITHUB_CLIENT_ID: ${{ secrets.BOT_GITHUB_CLIENT_ID }}
          BOT_GITHUB_CLIENT_SECRET: ${{ secrets.BOT_GITHUB_CLIENT_SECRET }}
          BOT_GITHUB_PRIVATE_KEY: ${{ secrets.BOT_GITHUB_PRIVATE_KEY }}
          BOT_GITHUB_WEBHOOK_SECRET: ${{ secrets.BOT_GITHUB_WEBHOOK_SECRET }}
          BOT_GITHUB_CALLBACK_ORIGIN: ${{ secrets.BOT_GITHUB_CALLBACK_ORIGIN }}
          GOOGLE_OAUTH_CLIENT_ID: ${{ vars.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          GOOGLE_OAUTH_REDIRECT_ORIGIN: ${{ vars.GOOGLE_OAUTH_REDIRECT_ORIGIN }}
          TESTS_GITHUB_TOKEN: ${{ secrets.TESTS_GITHUB_TOKEN }}
          ## Preflight
          PROXY_SUBDOMAIN: ${{ vars.PROXY_SUBDOMAIN }}
          PROXY_ZONE_NAME: ${{ vars.PROXY_ZONE_NAME }}
          LANDING_DOMAIN: ${{ vars.LANDING_DOMAIN }}
          ENVIRONMENT_SERVER_ZONE_NAME: ${{ vars.ENVIRONMENT_SERVER_ZONE_NAME }}
          ENVIRONMENT_SERVER_CERTIFICATE_ID: ${{ vars.ENVIRONMENT_SERVER_CERTIFICATE_ID }}
          PUBLIC_ENDPOINT_DOMAIN: ${{ secrets.PUBLIC_ENDPOINT_DOMAIN }}
          PUBLIC_ENDPOINT_SUBDOMAIN: ${{ secrets.PUBLIC_ENDPOINT_SUBDOMAIN }}
          TF_BACKEND_BUCKET: ${{ vars.TF_BACKEND_BUCKET }}
          TF_BACKEND_BUCKET_REGION: ${{ vars.TF_BACKEND_BUCKET_REGION }}
          TF_BACKEND_LOCK_TABLE: ${{ vars.TF_BACKEND_LOCK_TABLE }}
          TF_BACKEND_STATE_FILE: ${{ inputs.TF_BACKEND_STATE_FILE }}
          WING_ENV: "production" # both staging and production have the same resource config for now
          # wing tunnels
          TUNNELS_SUBDOMAIN: ${{ vars.TUNNELS_SUBDOMAIN }}
          ADMIN_USERNAMES: ${{ vars.ADMIN_USERNAMES }}
        run: pnpm wing compile --value wrpc/mergeLambdas=true --value wrpc/warmLambdas=true --platform @wingcloud/platform main.w
        working-directory: "apps/@wingcloud/infrastructure"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: gh-actions-wingcloud-staging
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: "apps/@wingcloud/infrastructure/target/main.tfaws"
      - name: Terraform Apply
        id: apply
        env:
          TF_LOG: debug
          TF_IN_AUTOMATION: true
          # dnsimple provider
          DNSIMPLE_TOKEN: ${{ secrets.DNSIMPLE_TOKEN }}
          DNSIMPLE_ACCOUNT: ${{ secrets.DNSIMPLE_ACCOUNT }}
          # for `flyctl auth docker` in terraform
          FLY_API_TOKEN: ${{ secrets.FLY_TOKEN }}
        run: |
          terraform apply -auto-approve
        working-directory: "apps/@wingcloud/infrastructure/target/main.tfaws"
      - name: Smoke Test
        run: |
          curl -sSfL https://$( [ -n "${PROXY_SUBDOMAIN}" ] && echo "${PROXY_SUBDOMAIN}." )${{ vars.PROXY_ZONE_NAME }}/wrpc/health
        env:
          PROXY_SUBDOMAIN: ${{ vars.PROXY_SUBDOMAIN }}
